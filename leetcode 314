Leetcode 314
Code:
class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        Map<Integer,List<int[]>> map=new TreeMap<>();
        List<List<Integer>> lists=new ArrayList<>();
        dfs(root,map,0,0);
        for(List<int[]> list:map.values()){
            Collections.sort(list,(a,b)-> a[0]-b[0]);
            List<Integer> temp=new ArrayList<>();
            for(int[] a:list){
                temp.add(a[1]);
            }
            lists.add(temp);
        }
        return lists;
    }
    private void dfs(TreeNode root, Map<Integer,List<int[]>> map, int depth, int layer){
        if(root==null)
            return;
        if(!map.containsKey(layer)){
            map.put(layer,new ArrayList<>());
        }
        map.get(layer).add(new int[]{depth,root.val});
        dfs(root.left,map,depth+1,layer-1);
        dfs(root.right,map,depth+1,layer+1);
    }
}

给dfs方法打补丁，维护depth
