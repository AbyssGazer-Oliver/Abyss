Leetcode 556
Code:
class Solution {
    public int nextGreaterElement(int n) {
        char[] nums=Integer.toString(n).toCharArray();
        int i=nums.length-2;
        while(i>=0&&nums[i]>=nums[i+1])
            i--;
        if(i==-1)
            return i;
        int j=nums.length-1;
        while(nums[j]<=nums[i])
            j--;
        char temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
        StringBuilder sb=new StringBuilder();
        for(int k=0;k<=i;k++){
            sb.append(nums[k]);
        }
        for(int k=nums.length-1;k>i;k--){
            sb.append(nums[k]);
        }
        long num=Long.parseLong(sb.toString());
        if(num>(long)Integer.MAX_VALUE)
            return -1;
        return (int)num;
    }
}

Explanation :-
Consider number 6537421 , firstly we convert this number to char array and check from right end
if numbers are in increasing order from right side then it means we cannot create a number more than given number because the left number's place value is always 
more than right one.
if there exist a number in array such that it is less than the right value , then we swap the position of number less than right value , with the number just bigger 
than that :-
here 6 5 3 7 4 2 1 :- 3 is the first number which is less than right values so swap 3 , 4
now the number becomes 6 5 4 7 3 2 1 :- but this is not the least number , to get least number we reverse the numbers from 7 to 1 ie 7 3 2 1 -> 1 2 3 7 and we add 
this to existing ans:-
final answer 6 5 4 1 2 3 7
