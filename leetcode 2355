Leetcode 2355
Code:
class Solution {
    public long maximumBooks(int[] books) {
        int len=books.length;
        long []dp=new long[len];
        long maxbooks=0;
        Deque<Integer> stack=new ArrayDeque();
        
        for(int i=0;i<len;i++){
            while(!stack.isEmpty()&&books[stack.peek()]>=books[i]-i+stack.peek())
                stack.pop();
            dp[i]=(stack.isEmpty()?0:dp[stack.peek()])+summary(books[i])-summary(books[i]-i+(stack.isEmpty()?-1:stack.peek()));
            maxbooks=Math.max(maxbooks,dp[i]);
            stack.push(i);
        }
        return maxbooks;
    }
    private long summary(int n){
        if(n<0)
            return 0;
        else
            return (long)(long)n*(long)(n+1)/2;
    }
}

数学思想与dp:
// use monotonic stack to populate dp array; for every index i,
	// find the nearest break point j < i such that books[i - j] <         找break point思路
	// books[i] - i + j

	// this becomes the restraining point for picking books as now
	// instead of picking (books[i] - i + j) books, we can only pick
	// books[i - j] books; so we will pick the maximum dp[j] books +
	// (books[i] + books[i] - 1 + books[i] - 2 + ... + books[i] - (i - j - 1))= dp[j]+(i-j-1)*books[i]-(i-j)(i-j+1)/2=dp[j]+books[i]*(books[i]+1)/2-(books[i]-i+j)*(books[i]-i+j+1)/2
