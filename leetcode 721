Leetcode 721
Code:
DFS解法:相对比较慢
class Solution {
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        Map<String,Set<String>> graph=new HashMap<>();
        Map<String,String> name=new HashMap<>();
        for(List<String> account:accounts){
            String username=account.get(0);
            for(int i=1;i<account.size();i++){
                if(!graph.containsKey(account.get(i)))
                    graph.put(account.get(i),new HashSet<>());
                name.put(account.get(i),username);
                if(i>1){
                    graph.get(account.get(i)).add(account.get(i-1));
                    graph.get(account.get(i-1)).add(account.get(i));
                }
            }
        }
        Set<String> visited=new HashSet<>();
        List<List<String>> res=new LinkedList<>();
        for(String email:name.keySet()){
            List<String> list=new LinkedList<>();
            if(visited.add(email)){
                dfs(graph,email,visited,list);
                Collections.sort(list);
                list.add(0,name.get(email));
                res.add(list);
            }
        }
        return res;
    }
    private void dfs(Map<String,Set<String>> graph, String email, Set<String> visited, List<String> list){
        list.add(email);
        for(String next:graph.get(email)){
            if(visited.add(next)){
                dfs(graph,next,visited,list);
            }
        }
    }
}
Union-find 解法:
