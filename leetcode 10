Leetcode 10
Code:
class Solution {
    public boolean isMatch(String s, String p) {
        int m=s.length(),n=p.length();
        boolean [][]dp=new boolean[m+1][n+1];
        dp[0][0]=true;
        for(int i=1;i<=n;i++){
            if(p.charAt(i-1)=='*'&&dp[0][i-2])
                dp[0][i]=true;
        }
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                char curP=p.charAt(j-1), curS=s.charAt(i-1);
                if(curP=='.'||curS==curP)
                    dp[i][j]=dp[i-1][j-1];
                else if(curP=='*'){
                    char preP=p.charAt(j-2);
                    if(preP!='.'&&preP!=curS)    // eliminate character to 0
                        dp[i][j]=dp[i][j-2];
                    else
                        dp[i][j]=dp[i][j-2]||dp[i-1][j-2]||dp[i-1][j];
                }
            }
        }
        return dp[m][n];
    }
}

// Induction rule is very similar to edit distance, where we also consider from the end. And it is based on what character in the pattern we meet.
        // 1. if p.charAt(j) == s.charAt(i), M[i][j] = M[i - 1][j - 1]
		//    ######a(i)
		//    ####a(j)
        // 2. if p.charAt(j) == '.', M[i][j] = M[i - 1][j - 1]
        // 	  #######a(i)
        //    ####.(j)
        // 3. if p.charAt(j) == '*':
        //    1. if p.charAt(j - 1) != '.' && p.charAt(j - 1) != s.charAt(i), then b* is counted as empty. M[i][j] = M[i][j - 2]
        //       #####a(i)
        //       ####b*(j)
        //    2.if p.charAt(j - 1) == '.' || p.charAt(j - 1) == s.charAt(i):
        //       ######a(i)
        //       ####.*(j)
		//
		// 	  	 #####a(i)
        //    	 ###a*(j)
        //      2.1 if p.charAt(j - 1) is counted as empty, then M[i][j] = M[i][j - 2]
        //      2.2 if counted as one, then M[i][j] = M[i - 1][j - 2]
        //      2.3 if counted as multiple, then M[i][j] = M[i - 1][j]
