Leetcode 128
Code:
class Solution {
    public int longestConsecutive(int[] nums) {
        HashMap<Integer,Integer> map=new HashMap<>();
        int res=0;
        for(int num:nums){
            if(!map.containsKey(num)){
                int left=map.containsKey(num-1)?map.get(num-1):0;
                int right=map.containsKey(num+1)?map.get(num+1):0;
                int sum=left+right+1;
                map.put(num,sum);
                res=Math.max(res,sum);
                map.put(num-left,sum);
                map.put(num+right,sum);
            }else
                continue;
        }
        return res;
    }
}

Whenever a new element n is inserted into the map, do two things:

See if n - 1 and n + 1 exist in the map, and if so, it means there is an existing sequence next to n. Variables left and right will be the length of those two sequences, 
while 0 means there is no sequence and n will be the boundary point later. Store (left + right + 1) as the associated value to key n into the map.
Use left and right to locate the other end of the sequences to the left and right of n respectively, and replace the value with the new length.
