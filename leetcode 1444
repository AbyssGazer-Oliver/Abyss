Leetcode 1444
Code:
class Solution {
    final int mod=(int)1e9+7;
    public int ways(String[] pizza, int k) {
        int m = pizza.length, n = pizza[0].length();
        Integer[][][] dp = new Integer[k][m][n];
        int[][] preSum = new int[m+1][n+1]; // preSum[r][c] is the total number of apples in pizza[r:][c:]
        for (int r = m - 1; r >= 0; r--)
            for (int c = n - 1; c >= 0; c--)
                preSum[r][c] = preSum[r][c+1] + preSum[r+1][c] - preSum[r+1][c+1] + (pizza[r].charAt(c) == 'A' ? 1 : 0);
        return dfs(m, n, k-1, 0, 0, dp, preSum);
    }
    private int dfs(int m, int n, int k, int r, int c, Integer[][][] dp, int[][] preSum) {
        if (preSum[r][c] == 0) return 0; // if the remain piece has no apple -> invalid
        if (k == 0) return 1; // found valid way after using k-1 cuts
        if (dp[k][r][c] != null) return dp[k][r][c];
        int ans = 0;
        // cut in horizontal
        for (int nr = r + 1; nr < m; nr++) 
            if (preSum[r][c] - preSum[nr][c] > 0) // cut if the upper piece contains at least one apple
                ans = (ans + dfs(m, n, k - 1, nr, c, dp, preSum)) % mod;
        // cut in vertical
        for (int nc = c + 1; nc < n; nc++) 
            if (preSum[r][c] - preSum[r][nc] > 0) // cut if the left piece contains at least one apple
                ans = (ans + dfs(m, n, k - 1, r, nc, dp, preSum)) % mod;
        return dp[k][r][c] = ans;
    }
}

dp复杂问题
The idea is to first convert the input to a binary matrix where an entry is 1 if and only if the input has an 'A' in that position. Then, we compute a "prefix sum" 
matrix,which will allow us to fetch the sum for any sub-matrix of the input matrix.

For the actual DP, if we have made k cuts, we just require that the last piece has an apple (i.e. sums to at least 1). Otherwise, we simply try all cuts horizontally, 
then vertically, and for each attempt we only seek the answer with 1 fewer cuts needed for the lower- or right-piece if the upper- or left-piece has at least 1 apple.
解空间length=kmn，每次解有(m+n-2)次操作
O(kmn(m+n))
