Leetcode 713
Code:
class Solution {
    public int numSubarrayProductLessThanK(int[] nums, int k) {
        if(k<1)
            return 0;
        int res=0;
        int product=1, start=0,end=0;
        while(end<nums.length){
            product*=nums[end];
            while(start<=end&&product>=k)
                product/=nums[start++];
            res+=end-start+1;
            end++;
        }
        return res;
    }
}
The idea is always keep an max-product-window less than K;
Every time shift window by adding a new number on the right(j), if the product is greater than k, then try to reduce numbers on the left(i), until the subarray product fit less than k again, (subarray could be empty);
Each step introduces x new subarrays, where x is the size of the current window (j + 1 - i);
example:
for window (5, 2), when 6 is introduced, it add 3 new subarray: (5, (2, (6)))
        (6)
     (2, 6)
  (5, 2, 6)
