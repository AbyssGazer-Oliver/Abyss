Leetcode 417
Code:
class Solution {
    int[][]dir = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        List<List<Integer>> res=new LinkedList<>();
        int m=heights.length,n=heights[0].length;
        boolean [][]pacific=new boolean[m][n];
        boolean [][]atlantic=new boolean[m][n];
        for(int i=0;i<m;i++){
            dfs(heights,pacific,Integer.MIN_VALUE,i,0);
            dfs(heights,atlantic,Integer.MIN_VALUE,i,n-1);
        }
        for(int i=0;i<n;i++){
            dfs(heights,pacific,Integer.MIN_VALUE,0,i);
            dfs(heights,atlantic,Integer.MIN_VALUE,m-1,i);
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(pacific[i][j]&&atlantic[i][j]){
                    List<Integer> list=new LinkedList<>();
                    list.add(i);
                    list.add(j);
                    res.add(list);
                }
            }
        }
        return res;
    }
    private void dfs(int[][] heights, boolean[][] ocean, int height, int x, int y){
        int m=heights.length,n=heights[0].length;
        if(x<0||x>=m||y<0||y>=n||ocean[x][y]||heights[x][y]<height)
            return;
        ocean[x][y]=true;
        for(int []d:dir){
            dfs(heights,ocean,heights[x][y],x+d[0],y+d[1]);
        }
    }
}

注意记住DFS写法
