Leetcode 1319
Code:
class Solution {
    public int makeConnected(int n, int[][] connections) {
        if(connections.length<n-1)
            return -1;
        List<Integer>[] graph=new List[n];
        for(int i=0;i<n;i++){
            graph[i]=new ArrayList<>();
        }
        for(int i=0;i<connections.length;i++){
            graph[connections[i][0]].add(connections[i][1]);
            graph[connections[i][1]].add(connections[i][0]);
        }
        int components=0;
        boolean[] visited=new boolean[n];
        for(int i=0;i<n;i++){
            components+=BFS(i,graph,visited);
        }
        return components-1;
    }
    private int BFS(int src,List<Integer>[] graph,boolean[] visited){
        if(visited[src])
            return 0;
        visited[src]=true;
        Queue<Integer> q=new LinkedList<>();
        q.offer(src);
        while(!q.isEmpty()){
            int v=q.poll();
            for(int u:graph[v]){
                if(!visited[u]){
                    visited[u]=true;
                    q.offer(u);
                }
            }
        }
        return 1;
    }
}

注意BFS思路，建立邻接链表
